import tempfile
import webbrowser
from impulse import ports
from textwrap import dedent
from impulse import dotfile


class BrowserGraphViewer(ports.GraphViewer):
    """
    Graph viewer that generates an HTML file with viz-js and opens it in a browser.
    """

    def view(self, dot: dotfile.DotGraph) -> None:
        download_file_stem = f"{dot.title.replace('.', '_')}_graph"

        html_content = dedent(f"""<!DOCTYPE html>
            <html>
            <head>
                <meta charset="utf-8">
                <title>{dot.title} | Impulse</title>
                <style>
                    body {{
                        margin: 0;
                        padding: 20px;
                        background-color: #f5f5f5;
                        font-family: helvetica, arial, sans-serif;
                    }}
                    #container {{
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        min-height: 100vh;
                    }}
                    h1 {{
                        text-align: center;
                        color: #222;
                        margin: 30px 0 45px;
                    }}
                    #graph {{
                        background-color: white;
                        padding: 20px;
                        border-radius: 8px;
                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    }}
                    #graph svg {{
                        max-width: 100%;
                        height: auto;
                    }}
                    #error {{
                        color: #d32f2f;
                        padding: 20px;
                        background-color: #ffebee;
                        border-radius: 4px;
                        display: none;
                    }}
                    footer {{
                        text-align: center;
                        margin-top: 10px;
                        padding: 20px;
                        color: #666;
                        font-size: 0.9em;
                    }}
                    a {{ color: #666; }}
                    a:hover {{ color: #444; }}
                    #download {{
                        margin-top: 20px;
                        text-align: center;
                    }}
                    #download a {{
                        color: #444;
                        text-decoration: none;
                        padding: 8px 16px;
                        border: 1px solid #444;
                        border-radius: 4px;
                        display: inline-block;
                        transition: all 0.2s;
                        margin: 0 5px;
                    }}
                    #download a:hover {{
                        background-color: #444;
                        color: white;
                    }}
                </style>
            </head>
            <body>
                <div id="container">
                    <h1>Import graph for <code>{dot.title}</code></h1>
                    <div id="graph"></div>
                    <div id="download">
                        <a href="#" id="download-svg-link">Download as SVG</a>
                        <a href="#" id="download-png-link">Download as PNG</a>
                    </div>
                    <div id="error"></div>
                    <footer>Generated by <a href='https://impulse-cli.readthedocs.io/'>Impulse</a></footer>
                </div>
                <script src="https://cdn.jsdelivr.net/npm/@viz-js/viz@3/lib/viz-standalone.js"></script>
                <script>
                    const dot = `{dot.render()}`;
            
                    Viz.instance().then(viz => {{
                        try {{
                            const svg = viz.renderSVGElement(dot);
                            document.getElementById('graph').appendChild(svg);

                            // Helper function to trigger file download
                            function downloadFile(blob, filename) {{
                                const url = URL.createObjectURL(blob);
                                const a = document.createElement('a');
                                a.href = url;
                                a.download = filename;
                                document.body.appendChild(a);
                                a.click();
                                document.body.removeChild(a);
                                URL.revokeObjectURL(url);
                            }}

                            // Setup SVG download link
                            document.getElementById('download-svg-link').addEventListener('click', function(e) {{
                                e.preventDefault();
                                const svgData = svg.outerHTML;
                                const blob = new Blob([svgData], {{ type: 'image/svg+xml' }});
                                downloadFile(blob, '{download_file_stem}.svg');
                            }});

                            // Setup PNG download link
                            document.getElementById('download-png-link').addEventListener('click', function(e) {{
                                e.preventDefault();
                                const canvas = document.createElement('canvas');
                                const ctx = canvas.getContext('2d');
                                const svgData = new XMLSerializer().serializeToString(svg);
                                const img = new Image();

                                img.onload = function() {{
                                    canvas.width = img.width;
                                    canvas.height = img.height;
                                    ctx.fillStyle = 'white';
                                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                                    ctx.drawImage(img, 0, 0);

                                    canvas.toBlob(function(blob) {{
                                        downloadFile(blob, '{download_file_stem}.png');
                                    }});
                                }};

                                img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgData)));
                            }});
                        }} catch (error) {{
                            const errorDiv = document.getElementById('error');
                            errorDiv.textContent = 'Error rendering graph: ' + error.message;
                            errorDiv.style.display = 'block';
                            console.error('Viz.js error:', error);
                        }}
                    }}).catch(error => {{
                        const errorDiv = document.getElementById('error');
                        errorDiv.textContent = 'Error loading Viz.js: ' + error.message;
                        errorDiv.style.display = 'block';
                        console.error('Failed to load Viz.js:', error);
                    }});
                </script>
            </body>
            </html>""")

        # Create a temporary HTML file
        fd, html_path = tempfile.mkstemp(
            suffix=".html", prefix=f"impulse_{dot.title.replace('.', '_')}_"
        )
        with open(html_path, "w", encoding="utf-8") as f:
            f.write(html_content)

        # Open in browser
        webbrowser.open(f"file://{html_path}")
